logging.level.org.springframework=info
# spring.datasource.platform = postgres
# spring.datasource.url = jdbc:postgresql://localhost:5432/socialmediaapp
# spring.datasource.username = postgres
# spring.datasource.password = 1234
# update: Spring does not make changes to the schema
# spring.jpa.hibernate.ddl-auto = update

# if we want to explore more information a part of the actuator
management.endpoints.web.exposure.include=*

#Enable H2 Console:
spring.h2.console.enabled=true
# Configure static URL for H2. URL to access H2 console: localhost:8080/h2-console
#spring.datasource.url=jdbc:h2:mem:testdb
# to avoid execution of the data.sql file before the table in H2 is created:
#spring.jpa.defer-datasource-initialization=true

#check the sql queries that run in the background
spring.jpa.show-sql=true

#connect to postgres
spring.datasource.platform = postgres
spring.datasource.url = jdbc:postgresql://localhost:5432/socialmediaapp
# database to familiarize with testing. Consider using H2 Embedded database or test containers to apply tests in a test db
#spring.datasource.url = jdbc:postgresql://localhost:5432/socialmediaapptest

spring.datasource.username = postgres
spring.datasource.password = 1234
#update: At the startup of the application based on the entities that are present, the database schema will be updated
spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.ddl-auto = create-drop


#Spring security: Set our own username and password:
#spring.security.user.name=username
#spring.security.user.password=password

app.jwt.secret=abcdefghijklmnOPQRSTUVWXYZ
