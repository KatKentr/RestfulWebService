package com.springboot.rest.webservices.socialmediaapp.service;


import com.springboot.rest.webservices.socialmediaapp.exception.UserNotFoundException;
import com.springboot.rest.webservices.socialmediaapp.model.User;
import com.springboot.rest.webservices.socialmediaapp.repository.UserRepository;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.time.Month;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class UserServiceTests {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    private User user,user2;


    @BeforeEach
    public void setUp(){
        //initialize a valid user
        user=new User();               //Remember: id is autogenerated. When we insert users to the database
        user.setName("Katerina");
        user.setDate(LocalDate.of( 2018 , Month.JANUARY , 23));
        user.setEmail("katerina@example.com");
        user.setPassword("1234");
        user.setRoles("user_role");
        user.setId(1);

        user2 = new User();
        user2.setName("Nene");
        user2.setDate(LocalDate.of( 2018 , Month.JANUARY , 23));
        user2.setEmail("nene@example.com");
        user2.setPassword("1234");
        user2.setRoles("user_role");
        user2.setId(2);
        //System.out.println(user2.getId());
        System.out.println("BeforeEach");
    }


    @Test
    public void getAllUsersTest(){
        when(userRepository.findAll()).thenReturn(List.of(user,user2));
        List<User> users=userService.getAllUsers();
        assertEquals(users.size(),2);

    }

    @Test
    public void getUserByIdTest_userExists(){

        when(userRepository.findById(user.getId())).thenReturn(Optional.ofNullable(user));
        Optional<User> retrievedUser=userService.getUserById(user.getId());
        assertEquals(user.getId(),retrievedUser.get().getId());
        assertEquals(user.getEmail(),retrievedUser.get().getEmail());
        assertEquals(user.getName(),retrievedUser.get().getName());
        assertEquals(user.getDate(),retrievedUser.get().getDate());

    }

    @Test
    public void getUserByIdTest_userNotExists(){
        when(userRepository.findById(user.getId())).thenReturn(Optional.empty());  //in case the user with thiss id doe not eits
        Exception exception = assertThrows(UserNotFoundException.class, () -> {
            userService.getUserById(user.getId());
        });
        assertTrue(exception.getMessage().contains("User with " +"id: "+user.getId()+ " not found"));

    }


    //TO DO:
    @Test
    public void deleteUserTest(){

    }







}
