package com.springboot.rest.webservices.socialmediaapp.RepositoryLayerTests;

import com.springboot.rest.webservices.socialmediaapp.model.Comment;
import com.springboot.rest.webservices.socialmediaapp.model.Post;
import com.springboot.rest.webservices.socialmediaapp.model.User;
import com.springboot.rest.webservices.socialmediaapp.repository.CommentRepository;
import com.springboot.rest.webservices.socialmediaapp.repository.PostRepository;
import com.springboot.rest.webservices.socialmediaapp.repository.UserRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;


@RunWith(SpringRunner.class)
//@SpringBootTest(classes = SocialMediaApplication.class)
@DataJpaTest    //By using DataJPATest all tests are transactional and rol back at the end of each test
public class CommentRepositoryTest {
	
	@Autowired
	private PostRepository postRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private CommentRepository commentRepository;
	private Post post;
	private User user;
	private Comment comment;
	
	
	@Before
	public void setUp() {
		 //initialize a valid user
		 user=new User();               //Remember: id is autogenerated
		 user.setName("Katerina");
		 user.setDate(LocalDate.of( 2018 , Month.JANUARY , 23));
		 user.setEmail("katerina@example.com");
		 user.setPassword("1234");
		 user.setRoles("user_role");
		 userRepository.save(user);
		 System.out.println("user saved");

		post=new Post();
		post.setUser(user);
		post.setDescription("description");
		postRepository.save(post);
		System.out.println("BeforeEach");

		comment=new Comment();
		comment.setPost(post);
		comment.setUser(user);
		comment.setDescription("comment");
	     	
	}
	

	//test case for saving a comment
	@Test
	public void saveCommentTest() {
		
		 commentRepository.save(comment);
		 //System.out.println("id of the comment is: "+comment.getId());
	     Comment fetchedComm= commentRepository.findById(comment.getId()).get();
	     assertEquals(comment.getId(), fetchedComm.getId());
		 assertEquals(comment.getUser().getName(), fetchedComm.getUser().getName());
		 assertEquals(comment.getPost().getId(), fetchedComm.getPost().getId());
			
	}
	

	//test case to retrieve a comment by id
	
	@Test
	public void findCommentbyIdTest_exists() {
		 commentRepository.save(comment);
		 Optional<Comment> opt =  commentRepository.findById(comment.getId());
	     assertEquals(comment.getId(), opt.get().getId());
	     assertEquals(comment.getUser().getName(), opt.get().getUser().getName());
		
	}

	@Test
	public void findCommentbyIdTest_notExists() {

		Optional<Comment> opt = commentRepository.findById(133);
		assertEquals(Optional.empty(), opt);


	}
	

	
	//test case for deleting a post by id
	@Test
	public void deleteCommentByIdTest() {

		  commentRepository.save(comment);
		  //System.out.println("id of post is: "+post.getId());
	      commentRepository.deleteById(comment.getId());
	      Optional optional = commentRepository.findById(comment.getId());
	      assertEquals(Optional.empty(), optional);
		
	}
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
